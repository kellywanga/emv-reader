#ifndef LISTS_H
#define LISTS_H

const char *LIST_TAGS[] = {
  "42", "Issuer Identification Number (IIN)",
  "4f", "Application Identifier (AID) – card",
  "50", "Application Label",
  "57", "Track 2 Equivalent Data",
  "5a", "Application Primary Account Number (PAN)",
  "61", "Application Template",
  "6f", "File Control Information (FCI) Template",
  "70", "EMV Proprietary Template",
  "71", "Issuer Script Template 1",
  "72", "Issuer Script Template 2",
  "73", "Directory Discretionary Template",
  "77", "Response Message Template Format 2",
  "80", "Response Message Template Format 1",
  "81", "Amount, Authorised (Binary)",
  "82", "Application Interchange Profile",
  "83", "Command Template",
  "84", "Dedicated File (df) Name",
  "86", "Issuer Script Command",
  "87", "Application Priority Indicator",
  "88", "Short File Identifier (SFI)",
  "89", "Authorisation Code",
  "8a", "Authorisation Response Code",
  "8c", "Card Risk Management Data Object List 1 (CDOL1)",
  "8d", "Card Risk Management Data Object List 2 (CDOL2)",
  "8e", "Cardholder Verification Method (CVM) List",
  "8f", "Certification Authority Public Key Index",
  "90", "Issuer Public Key Certificate",
  "91", "Issuer Authentication Data",
  "92", "Issuer Public Key Remainder",
  "93", "Signed Static Application Data",
  "94", "Application File Locator (AFL)",
  "95", "Terminal Verification Results",
  "97", "Transaction Certificate Data Object List (TDOL)",
  "98", "Transaction Certificate (TC) Hash Value",
  "99", "Transaction Personal Identification Number (PIN) Data",
  "9a", "Transaction Date",
  "9b", "Transaction Status Information",
  "9c", "Transaction Type",
  "9d", "Directory Definition File (Ddf) Name",
  "a5", "File Control Information (FCI) Proprietary Template",
  "e0", "Receive Data Elements",
  "e1", "Issue Data Elements (Secure)",
  "e2", "Decision",
  "e3", "Issue Data Elements (Non-Secure)",
  "c2", "Encrypted Data",
  "5f20", "Cardholder Name",
  "5f24", "Application Expiration Date",
  "5f25", "Application Effective Date",
  "5f28", "Issuer Country Code",
  "5f2a", "Transaction Currency Code",
  "5f2d", "Language Preference",
  "5f30", "Service Code",
  "5f34", "Application Primary Account Number (PAN) Sequence Number",
  "5f36", "Transaction Currency Exponent",
  "5f50", "Issuer URL",
  "5f53", "International Bank Account Number (IBAN)",
  "5f54", "Bank Identifier Code (BIC)",
  "5f55", "Issuer Country Code (alpha2 format)",
  "5f56", "Issuer Country Code (alpha3format)",
  "5f57", "Account Type",
  "9f01", "Acquirer Identifier",
  "9f02", "Amount, Authorised (Numeric)",
  "9f03", "Amount, Other (Numeric)",
  "9f04", "Amount, Other (Binary)",
  "9f05", "Application Discretionary Data",
  "9f06", "Application Identifier (AID) – terminal",
  "9f07", "Application Usage Control",
  "9f08", "Application Version Number",
  "9f09", "Application Version Number",
  "9f0b", "Cardholder Name Extended",
  "9f0d", "Issuer Action Code – Default",
  "9f0e", "Issuer Action Code – Denial",
  "9f0f", "Issuer Action Code – Online",
  "9f10", "Issuer Application Data",
  "9f11", "Issuer Code Table Index",
  "9f12", "Application Preferred Name",
  "9f13", "Last Online Application Transaction Counter (ATC) Register",
  "9f14", "Lower Consecutive Offline Limit",
  "9f15", "Merchant Category Code",
  "9f16", "Merchant Identifier",
  "9f17", "Personal Identification Number (PIN) Try Counter",
  "9f18", "Issuer Script Identifier",
  "9f1a", "Terminal Country Code",
  "9f1b", "Terminal Floor Limit",
  "9f1c", "Terminal Identification",
  "9f1d", "Terminal Risk Management Data",
  "9f1e", "Interface Device (IFD) Serial Number",
  "9f1f", "Track 1 Discretionary Data",
  "9f20", "Track 2 Discretionary Data",
  "9f21", "Transaction Time",
  "9f22", "Certification Authority Public Key Index",
  "9f23", "Upper Consecutive Offline Limit",
  "9f26", "Application Cryptogram",
  "9f27", "Cryptogram Information Data",
  "9f2d", "Integrated Circuit Card (ICC) PIN Encipherment Public Key Certificate",
  "9f2e", "Integrated Circuit Card (ICC) PIN Encipherment Public Key Exponent",
  "9f2f", "Integrated Circuit Card (ICC) PIN Encipherment Public Key Remainder",
  "9f32", "Issuer Public Key Exponent",
  "9f33", "Terminal Capabilities",
  "9f34", "Cardholder Verification Method (CVM) Results",
  "9f35", "Terminal Type",
  "9f36", "Application Transaction Counter (ATC)",
  "9f37", "Unpredictable Number",
  "9f38", "Processing Options Data Object List (PDOL)",
  "9f39", "Point-of-Service (POS) Entry Mode",
  "9f3a", "Amount, Reference Currency",
  "9f3b", "Application Reference Currency",
  "9f3c", "Transaction Reference Currency Code",
  "9f3d", "TransactionReference Currency Exponent",
  "9f40", "Additional Terminal Capabilities",
  "9f41", "Transaction SequenceCounter",
  "9f42", "Application Currency Code",
  "9f43", "Application Reference Currency Exponent",
  "9f44", "Application Currency Exponent",
  "9f45", "Data Authentication Code",
  "9f46", "Integrated Circuit Card (ICC) Public Key Certificate",
  "9f47", "Integrated Circuit Card (ICC) Public Key Exponent",
  "9f48", "Integrated Circuit Card (ICC) Public Key Remainder",
  "9f49", "Dynamic Data Authentication Data Object List(DDOL)",
  "9f4a", "Static Data Authentication Tag List",
  "9f4b", "Signed Dynamic Application Data",
  "9f4c", "ICC Dynamic Number",
  "9f4d", "Log Entry",
  "9f4e", "Merchant Name and Location",
  "9f4f", "Log Format",
  "bf0c", "File Control Information (FCI) Issuer Discretionary Data",
  "df01", "Digits",
  "df02", "Status Bytes",
  "df11", "Acquirer ID",
  "df12", "Answer To Reset (ATR)",
  "df13", "ISO 7811 Track 1 card data",
  "df14", "ISO 7811 Track 2 card data",
  "df15", "ISO 7811 Track 3 card data",
  "df16", "Enciphered PIN Block",
  "df17", "Key Serial Number",
  "df18", "Risk Management",
  ""
};

const char *LIST_STATUS_WORDS[] = {
  "9000", "Command successful",
  "6a83", "Record not found",
  "6a81", "Function not supported",
  "6985", "Conditions of use not satisfied",
  "6a82", "File not found",
  "6a86", "Incorrect P1 or P2 parameter",
  ""
};

const char EMPTY[] = "";

const char *get_value(uint16_t key, const char *list[]) {
  char hex[5];
  sprintf(hex, "%x", key);

  for(int i=0; strlen(list[i])>0; i+=2)
    if (!strcmp(hex, list[i]))
      return list[i+1];

  return EMPTY;
}

#endif // LISTS_H